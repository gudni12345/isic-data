@using BootstrapSupport
@model ISIC_DATA.Models.DogViewModel

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Register Dog";
    Html.EnableClientValidation(false);
}

<h2>Register Dog(s)</h2>
<!-- Styles.Render("~/Content/typeahead.js-bootstrap.css")  -->

@if (ViewData.ModelState.Keys.Any(k=> ViewData.ModelState[k].Errors.Count() > 0)) { 
	<div class="alert alert-danger">
		<button class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
		@Html.ValidationSummary(false, "Errors: ")
	</div>
}

@using (Html.BeginForm(new { @class = "form-horizontal span9" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <legend>Litter</legend>
    <fieldset>
        <div class="control-group">
            <div class="controls">

                <b>@Html.Label("Date of birth:", new { @class = "control-label" }) </b>
                @Html.TextBoxFor(model => model.Litter.DateOfBirth, new { @class = "datePicker", data_bind = "value: birth" })

                <label>Breeder:</label>              
                @Html.TextBoxFor(model => model.Litter.Person.Name, new { placeholder="Breeder name", @id="Breeder_typeahead"})
                @Html.HiddenFor(model => model.Litter.PersonId, new { @id = "returnBreederId" })
                @Html.ActionLink("Add", "CreateBreeder", "Person", null, new { id = "btnCreate", @class = "btn btn-success" })

                <div id='dialogDiv' class='modal hide fade in'>
                    <div id='dialogContent'></div>
                </div>

                <label>Father:</label>
                <div class="CustomTemplate">
                    @Html.TextBoxFor(model => model.Litter.Father.Reg, new { placeholder="Father's Reg", id="typeaheadFather" })                                
                    @Html.HiddenFor(model => model.Litter.FatherId, new { @id = "returnFatherId" })
                    @Html.TextBoxFor(model => model.Litter.Father.Name, new { id = "fatherName", disabled = "disabled"})                  
                </div>

                <label>Mother:</label>
                <div class="CustomTemplate">
                    @Html.TextBoxFor(model => model.Litter.Mother.Reg, new {placeholder="Mother's Reg", id="typeaheadMother" })                    
                    @Html.HiddenFor(model => model.Litter.MotherId, new { @id = "returnMotherId" })
                    @Html.TextBoxFor(model => model.Litter.Mother.Name, new { id="motherName", disabled = "disabled"})
                </div>
            </div>
        </div>


    </fieldset>


	<fieldset>
		<legend>Dogs</legend>
		@Html.EditorFor(model => model.Dogs)

		<button class="btn btn-success" data-bind="click: addPosition">Add one</button>
		<button class="btn btn-danger" data-bind="click: removePosition">Remove one</button>
	</fieldset>        
	
	<div class="form-actions">
		<button type="submit" class="btn btn-primary">Save changes</button>
		@Html.ActionLink("Cancel", "../Home/Index", null, new { @class = "btn " })
	</div>
   
} <!-- end form -->

@if (ViewData["Error"] != null)
{
	<div class="alert alert-error"> @ViewData["Error"].ToString()</div>
}
@if (TempData["Success"] != null)
{
	<div class="alert alert-success">@TempData["Success"].ToString()</div>
}

<script type="text/javascript" src="../scripts/hogan-2.0.0.js"></script>

<script type="text/javascript">
														//MODAL for adding breeder
	$(function () {
		$.ajaxSetup({ cache: false });
		$('#btnCreate').click(function () {                 // Open the Modal
			$('#dialogContent').load(this.href, function () {
				$('#dialogDiv').modal({
					backdrop: 'static',
					keyboard: true
				}, 'show');
				bindForm(this);
			});
			return false;
		});
	});

	function bindForm(dialog) {
		$('form', dialog).submit(function () {
			$.ajax({
				url: this.action,
				type: this.method,
				data: $(this).serialize(),
				success: function (result) {
					if (result.success) {           // if data was saved successfully we close the modal.
						$('#dialogDiv').modal('hide');
						//Refresh: location.reload();

					} else {
						$('#dialogContent').html(result);
						bindForm();
					}
				}
			});
			return false;
		});
	}


														// DatePicker
	$(document).ready(function () {                 
		$.validator.methods["date"] = function (value, element) { return true; }
		$(".datePicker").datepicker({
			format: 'dd/mm/yyyy',
			todayBtn: true,
			orientation: "top auto",
			autoclose: true
		});
	});
												// Type-a-head for Breeder
	$(document).ready(function () {
		$('#Breeder_typeahead').typeahead({
			name: "Breeder",
			remote: 'Registerdog/FetchBreeders?q=%QUERY',
			limit: 5,
			valueKey: "Name",
		}).on("typeahead:selected typeahead:autocompleted",
			function (e, datum) {
				$('#returnBreederId').val(datum.Id);
			}
		);
	});
													// Type-a-head for Father
	$(document).ready(function () {
		$("#typeaheadFather").typeahead({
			name: "Father", 
			remote: 'Registerdog/FetchFathers?q=%QUERY',
			limit: 5,
			valueKey: "Reg",
			template: ['<p class="repo-reg">{{Reg}}</p>', '<p class="repo-name">{{Name}}</p>',
			].join(''),
			engine: Hogan
		}).on("typeahead:selected typeahead:autocompleted",
			function (e, datum) {
				$('#returnFatherId').val(datum.Id);
				$('#fatherName').val(datum.Name);

			}
		);
	});
													// Type-a-head for Mother
	$(document).ready(function () {
		$("#typeaheadMother").typeahead({
			name: "Mother",
			remote: 'Registerdog/FetchMothers?q=%QUERY',
			limit: 5,
			valueKey: "Reg",
			template: ['<p class="repo-reg">{{Reg}}</p>', '<p class="repo-name">{{Name}}</p>',].join(''),
			engine: Hogan
		}).on("typeahead:selected typeahead:autocompleted",
			function (e, datum) {
				$('#returnMotherId').val(datum.Id);
				$('#motherName').val(datum.Name);

			}
		);
	});



  

	var numOfDogs=1;

	function createViewModel() {

		var createPosition = function () {
			return {
				name: ko.observable(),
				reg: ko.observable(),
				sex: ko.observable(),
				colorId: ko.observable(),                
			};
		};

		var addPosition = function () {
			if (numOfDogs < 15) {
				positions.push(createPosition());
				numOfDogs++;
			}
		};

		var removePosition = function () {
			if (numOfDogs > 1) {
				positions.pop();
				numOfDogs = numOfDogs - 1;
			}
		};

		var birth = ko.observable();
		var fatherName = ko.observable();
		var positions = ko.observableArray([createPosition()]);

		return {
			birth: birth,
			fatherName: fatherName,
			positions: positions,
			addPosition: addPosition,
			removePosition: removePosition
		};

	}

	$(document).ready(function () {
		var viewModel = createViewModel();
		ko.applyBindings(viewModel);
	});
	








</script>

