@using BootstrapSupport
@model ISIC_DATA.Models.DogViewModel

<br />
<br />
<h2>Register Dog(s)</h2>


@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    <fieldset>
        <legend>Litter details</legend>

        
        <span class="editor-field">
            @Html.Label("Date of birth:", new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Litter.DateOfBirth, new { @class = "datePicker", data_bind = "value: birth"})
            @Html.ValidationMessageFor(model => model.Litter.DateOfBirth, null,  new { @class = "help-inline" })
        </span>
       
        <div class="editor-field">
            <label>Father:</label>
            @Html.DropDownListFor( model => model.Litter.FatherId, (SelectList)ViewBag.FatherId, "Select father")
            @Html.ValidationMessageFor(model => model.Litter.FatherId, null,  new { @class = "help-inline" })
        </div>

        <div class="editor-field">
            <label>Mother:</label>
            @Html.DropDownListFor( model => model.Litter.MotherId, (SelectList)ViewBag.MotherId,"Select mother")
            @Html.ValidationMessageFor(model => model.Litter.MotherId, null,  new { @class = "help-inline" })
        </div>



    </fieldset>
    <fieldset>
        <legend>Dogs</legend>
        @Html.EditorFor(model => model.Dogs)
        <button data-bind="click: addPosition">Add one</button>
        <button data-bind="click: removePosition">Remove one</button>
    </fieldset>
    
    <div class="form-actions">
        <button type="submit" class="btn btn-primary">Save changes</button>
        @Html.ActionLink("Cancel", "../Home/Index", null, new { @class = "btn " })
    </div>
    

}


<script type="text/javascript">

  
    $(document).ready(function () {
        $.validator.methods["date"] = function (value, element) { return true; }
        $(".datePicker").datepicker({ format: 'dd/mm/yyyy' });
    });

    var numOfDogs=1;

    function createViewModel() {

        var createPosition = function () {
            return {
                name: ko.observable(),
                reg: ko.observable(),
                sex: ko.observable(),
                colorId: ko.observable()
            };
        };

        var addPosition = function () {
            if (numOfDogs < 15) {
                positions.push(createPosition());
                numOfDogs++;
            }
        };

        var removePosition = function () {
            if (numOfDogs > 1) {
                positions.pop();
                numOfDogs = numOfDogs - 1;
            }
        };

        var birth = ko.observable();        
        var positions = ko.observableArray([createPosition()]);

        return {
            birth: birth,            
            positions: positions,
            addPosition: addPosition,
            removePosition: removePosition
        };

    }

    $(document).ready(function () {
        var viewModel = createViewModel();
        ko.applyBindings(viewModel);
    });

</script>

